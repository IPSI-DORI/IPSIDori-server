plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.server'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacoco {
    toolVersion = "0.8.8"
}

def hasTestTargets = fileTree("src/main/java/com/server/dori/domain").matching {
    include "**/entity/**"
}.files.size() > 0

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    onlyIf { hasTestTargets }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // Apache HttpClient
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.1'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    runtimeOnly 'com.h2database:h2'

    // Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
}

jacocoTestReport {
    dependsOn test
    onlyIf { hasTestTargets }
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        println "Class directories before filtering: ${classDirectories.files}"

        classDirectories.setFrom(
                files(
                        classDirectories.files.collect {
                            fileTree(dir: it, includes: ['**/entity/**'])
                        }
                )
        )
    }
}
